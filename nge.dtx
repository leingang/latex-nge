% \iffalse
%<*ins>
\def\plainTeXname{plain}
\ifx\fmtname\plainTeXname
\input docstrip.tex
\keepsilent\askforoverwritefalse
\nopreamble\nopostamble
\generate{\file{ngetest.cls}{\from{\jobname.dtx}{ngetest}}
  \file{nge.drv}{\from{\jobname.dtx}{driver}}
  \file{test.tex}{\from{\jobname.dtx}{test}}
  \file{test-ans.tex}{\from{\jobname.dtx}{test}}
  \file{test-key.tex}{\from{\jobname.dtx}{test}}
}
\expandafter\endbatchfile
\fi
%</ins>
%<*hide>
\documentclass[draft]{ltxdoc}
%</hide>
%<*driver>
%<driver>\documentclass[final]{ltxdoc}
\usepackage{ifthen}
\usepackage{ifdraft}
\usepackage[obeyDraft,dvistyle]{todonotes}
\usepackage{showkeys}
\usepackage{svninfo}
\providecommand{\fileversion}{}
\providecommand{\filename}{}

\usepackage{amsmath}
\usepackage{fancyvrb}
\VerbatimFootnotes
\DefineShortVerb{\|}

\EnableCrossrefs
\CodelineIndex
\RecordChanges

\newcommand{\package}[1]{\textsf{#1}}
\newcommand{\latexfile}[1]{\textsf{#1}}
\newcommand{\latexclass}[1]{\latexfile{#1}}
\newcommand{\latexpackage}[1]{\latexfile{#1}}
\newcommand{\option}[1]{\textsl{#1}}
\newcommand{\optionvalue}[1]{\texttt{#1}}
\newcommand{\mode}[1]{\textbf{#1}}
\newcommand{\nged}{\package{NGEd}}
\newenvironment{warning}{\par\textit{Warning}:\small}{\par}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \CheckSum{0}
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%^^A \ifdraft{%
%   \svnInfo $Id$ %^^A
%   \renewcommand{\fileversion}{development version, revision \svnInfoRevision}
%   \ProvidesFile{\svnInfoFile}[^^A
%   \svnInfoYear/\svnInfoMonth/\svnInfoDate\space\fileversion: NGEd source file.]^^A
%^^A }{}
% \DoNotIndex{\NeedsTeXFormat,\ProvidesClass,\ProvidesPackage,\ProvidesFile}
% \DoNotIndex{\RequirePackage,\LoadClass,\InputIfFileExists}
% \DoNotIndex{\DeclareOption,\CurrentOption,\ExecuteOptions,\ProcessOptions}
% \DoNotIndex{\PassOptionsToPackage,\PassOptionsToClass}
% \DoNotIndex{\ClassWarning,\PackageWarning,\ClassError,\PackageError}
% \DoNotIndex{\AtEndOfClass,\AtEndOfPackage,\AtBeginDocument,\AtEndDocument}
% \DoNotIndex{\newcommand,\newenvironment,\renewcommand,\renewenvironment}
% \DoNotIndex{\begin,\begingroup,\end,\endgroup,\csname,\endcsname}
% \DoNotIndex{\normalfont,\itshape,\slshape,\bfseries,\sffamily}
% \DoNotIndex{\textbf,\textit}
% \DoNotIndex{\item,\par}
% \DoNotIndex{\@onelevel@sanitize,\@nil,\@nnil}
% \DoNotIndex{\pgfkeys,\pgfqkeys,\pgfkeysalso,\pgfqkeysalso}
% \DoNotIndex{\pgfkeyslet,\pgfkeysvalueof,\pgfkeysifdefined}
% \DoNotIndex{\pgfkeyscurrentname,\ProcessPgfOptions}
% \DoNotIndex{\excludeversion,\includeversion}
% \DoNotIndex{\ifthenelse,\equal,\newboolean,\boolean,\setboolean,\or}
% \DoNotIndex{\newcounter,\setcounter,\stepcounter,\refstepcounter}
% \DoNotIndex{\addtocounter,\value,\arabic}
% \DoNotIndex{\def,\edef,\let,\if,\ifx,\else,\fi}
% \DoNotIndex{\expandafter,\noexpand,\relax}
% \DoNotIndex{\meaning,\string,\jobname,\space,\typeout}
% \DoNotIndex{}
%
% \title{\nged: A Next Generation Educational Bundle\\ \fileversion}
% \author{Matthew Leingang\\leingang@courant.nyu.edu
%   \and Denis Kosygin\\kosygin@courant.nyu.edu}
% ^^A \ifdraft{^^A
%   \renewcommand{\date}{\svnToday}^^A
%^^A}{}
% \maketitle
% \tableofcontents
% \listoftodos
%
%
% \section{Exams and other tests}
% \label{sec:user-ngetest}
%
% Class \latexclass{ngetest} is the generic class for producing
% various educational tests: exams, quizzes, questionnaires and so
% on\ldots.  In order to avoid overloading the word \emph{test} and in
% order reduce the risk of confusion in the discussion below we refer
% to one (and perhaps the most typical) representative of educational
% tests: an exam, but most of the discussion applies with little
% changes to other types of educational tests.
%
% \nged{} recognizes three general stages in a typical examination
% process: the \emph{testing} stage proper, when the exam is
% administered, the \emph{marking} stage, when the collected exams are
% checked and graded and the \emph{discussion} stage, when the results
% of the exam are discussed with the students.  Each of these stages
% requires its own version of examination papers: pages with lists of
% questions and problems for testing stage, questions with answers and
% problems with sample solutions for discussion stage, and questions
% with answers and the marking key for the marking stage.
%
% Class \latexclass{ngetest} makes it possible to produce either of
% these three versions of an exam from the same \LaTeX{} document,
% prepared in advance, by processing the document in one of the three
% modes: \mode{test}, \mode{answers} and \mode{key}.  Mode \mode{test}
% is used to produce examination papers for the testing stage, modes
% \mode{answers} and \mode{key} are used to support the discussion and
% the marking stages respectively.
%
% The mode of \latexclass{ngetest} may be specified explicitely as a
% class option (see section \ref{sec:reference-ngetest-options}).  If the
% mode is not set explicitely, \latexclass{ngetest} inspects the file
% name of the \LaTeX{} document being processed and tries to guess an
% appropriate mode.  The exact details of mode determining algorithm
% is given in section \ref{sec:reference-ngetest-modes}.
% 
%^^A \subsection{Options}
%^^A \label{sec:user-ngetest-options}
%
% Class \latexclass{ngetest} is derived from the standard \LaTeX\
% class \latexclass{article}.  It accepts all the options of this
% class and they have the same meaning in both classes.  In addition
% class \latexclass{ngetest} also has a number of its own options,
% most of which may accept a value, when they are specified as class
% options in the |\documentclass| line of the document.  For example,
% the line
% \begin{Verbatim}[gobble=2]
% \documentclass[12pt,mode=answers]{ngetest}
% \end{Verbatim}
% specifies two options for \latexclass{ngetest}: option \option{12pt}
% and \option{mode}.  Option \option{12pt} is the standard option for
% \LaTeX\ class \latexclass{article} and it has the same effect in
% \latexclass{ngetest}, it sets the font size to 12 points.  Option
% \option{mode} is \latexclass{ngetest}'s own option and the
% assignment |mode=answers| above sets the document processing mode of
% of \latexclass{ngetest} to \mode{answers}.
%  
% The full list of class options for \latexclass{ngetest} is given in
% section \ref{sec:reference-ngetest-options}.  In addition for each
% value-receiving option this
% section lists all the values this option may receive.
%
%
% \section{Reference manual}
% \label{sec:reference-ngetest}
% \subsection{Options}
% \label{sec:reference-ngetest-options}
% 
% There are two types of class options for \latexclass{ngetest}: most
% of the options are the usual class options and in addition some of
% options for class \latexclass{ngetest} may accept values.  Any
% option described in this section does not accept any values unless
% it is explicitely stated otherwise.  A value-accepting option is
% specified in the options list of the |\documentclass| line of the
% document in the form \meta{option}|=|\meta{value}.  For example, in
% the line
% \begin{Verbatim}[commandchars=\+\{\}, gobble=4]
%   \documentclass[+meta{option}_1=value_1,+meta{option}_2,+dots]+{ngetest+}
% \end{Verbatim}
% \meta{option}$_1$ receives value |value_1| and \meta{option}$_2$
% receives no value.
%
% Class \latexclass{ngetest} processes value receiving options with
% the help of package \latexpackage{pgfopts}.  No blank spaces,
% commas, or curly braces |{| and |}| are allowed in the assignment
% \meta{option}|=|\meta{value}.  If several assignments for the same
% option are specified on the |\documentclass| line, they are
% processed consecutively, in the order, in which they were given.
% For example after the line
% \begin{Verbatim}[gobble=4]
%   \documentline[modesep=.,modesep=+]{ngetest}
% \end{Verbatim}
% is processed, option \option{modesep} will have received value
% \optionvalue{+}.
%
%
%
%  
% Class \latexclass{ngetest} is derived from the standard \LaTeX\
% class \latexclass{article}.  It accepts all the options of
% \latexclass{article} class:
% \option{a4paper},
% \option{a5paper},
% \option{b5paper},
% \option{letterpaper},
% \option{legalpaper},
% \option{executivepaper},
% \option{landscape},
% \option{10pt},
% \option{11pt},
% \option{12pt},
% \option{oneside},
% \option{twoside},
% \option{draft},
% \option{final},
% \option{titlepage},
% \option{notitlepage},
% \option{onecolumn},
% \option{twocolumn},
% \option{leqno},
% \option{fleqn}, and
% \option{openbib}.
% Most of these options have the same meaning in class
% \latexclass{ngetest} as in \latexclass{article}.  All the
% differences are explicitely described below.
% 
% Class \latexclass{ngetest} uses package \latexpackage{versions} and
% accepts options \option{nogroup} and \option{tracing}, which have
% the same meaning in class \latexclass{ngetest} as in package
% \latexpackage{versions}.
%
%  
%
% Here is the complete list of \latexclass{ngetest}'s own options
% with the description of accepted values.
% \begin{description}
% \item[\option{mode}] sets the document processing mode of
%   \latexclass{ngetest}. It recognizes values \optionvalue{test},
%   \optionvalue{answers} and \optionvalue{key} and sets the
%   processing mode to the received value.  All the unrecognized
%   values are ignored and a warning is issued.
%
%   If the mode is not specified \latexclass{ngetest} tries to guess
%   the appropriate mode by inspecting the file name of the processed
%   document.  All the guessing is turned off if the mode is
%   explicitely given as a class option.  For details see section
%   \ref{sec:reference-ngetest-modes}.
% \item[\option{modesep}] specifies the fragment separator for file
%   name inspection of the processed document, when
%   \latexpackage{ngetest} tries to deduce the mode from the file name
%   (for details see section \ref{sec:reference-ngetest-modes}).
%
%   Accepts a nonblank string of characters which typically is a
%   one-character string.  Default value is \optionvalue{-}.
%
%   Not all characters are accepted by this option, and use of some
%   other characters is not recommended.  The following characters are
%   forbidden as values for \option{modesep}: comma |,|, equals sign
%   |=|, the square
%   brackets |[| and |]|, and the curly braces |{| and |}|.  
%
%   It is also not recommended to use the following characters as file
%   name separators: percent sign |%|, hash mark |#|, tilde |~| and
%   backslash |\|.  Even though it is possible  to give these
%   characters as \option{modesep} values, they have  special meaning
%   for \LaTeX{} and may make it confused during one   of the later
%   processing stages.
%
%   Similarly it is not recommended to use as file name separators
%   characters |<|, |>|, |(|, |)|, \Verb+|+, |/|, |*|, |;|, |:|, |$|,
%   |"|, |'|, |`|, |!|, |?|, which may have special meaning for the
%   operating system and may make it confused\footnote{Note, in
%     particular, that some of these characters may not be even
%     legitimate file name characters for some operating systems, for
%     example the forward slash \verb|/| in Unix and colon \verb|:| in
%     Windows.}  when it tries latex and other programs on a file,
%   whose name includes these characters.
%
%   Out of the remaining non-alphanumeric characters |-|, |_|, |.|,
%   |+|, |^|, and |@| all may be used as file name separators, with
%   the first four being preferred choices.  However, beware of using
%   |-| and |_| characters in the same file name, visually they are
%   easily mixed up with each other.
% 
%   Option \option{modesep} also accepts special values
%   \optionvalue{comma} and \optionvalue{equals}, which instruct
%   \latexclass{ngetest} to use characters |,|, and, respectively, |=|
%   as the file name separator.
% \end{description}
%
% \subsection{Modes}
% \label{sec:reference-ngetest-modes}
%
% Here is the exact algorithm of how \latexpackage{ngetest} determines
% the document processing mode.  Initially the processing mode is
% undefined.
% \begin{enumerate}\renewcommand{\labelenumi}{\itshape Step \theenumi).}
% \item All the |\documentclass| line option settings of the form
%   |mode=|\meta{value} are processed consecutively, in the order they
%   were specified.  If \meta{value} is a recognized value, the
%   document processing mode is set to \meta{value}, otherwise this
%   setting is ignored and the "Unrecognized mode" warning is issued.
%
%   For example, options line
%   \begin{Verbatim}[gobble=6]
%     \documentclass[mode=answers]{ngetest}
%   \end{Verbatim}
%   will turn on \mode{answers} mode, whereas after the options line
%   \begin{Verbatim}[gobble=6]
%     \documentclass[mode=hints]{ngetest}
%   \end{Verbatim}
%   containing unrecognized option value \optionvalue{hints} the
%   \latexclass{ngetest}'s mode is still undefined.
%
%   After all the mode settings in |\documentclass| line are
%   processed the document processing mode is either set to the last
%   recognized value or is still undefined.  The latter is also the
%   case, in particular, when there were no settings
%   |mode=|\meta{value} among class options.
%
% \item If after step 1 the mode is still not defined,
%   \latexpackage{ngetest} tries to guess an appropriate mode from the
%   file name of the processed latex document \footnote{More
%     precisely, the content of \LaTeX macro \verb|\jobname| is
%     inspected}.  If the file name is \meta{name}|.tex|, then after
%   the extension |.tex| is thrown away, \latexpackage{ngetest}
%   represents \meta{name} as a sequence of fragments separated by the
%   value of option \option{modesep}, where none of the fragments
%   contains the value of \option{modesep}.
%
%   For example, if the default setting of \option{modesep} is not
%   changed, then \meta{name} is represented as
%   \begin{equation*}
%     \text{\meta{name}}
%     =\text{\meta{fragment}}_1\verb|-|\text{\meta{fragment}}_2\verb|-|
%     \dots\verb|-|\text{\meta{fragment}}_l
%   \end{equation*}
%   where the separating character |-| does not occur in any of the
%   fragments\footnote{It means in particular, that if a separating
%     character is followed by another separating character, these two
%     characters bound an empty fragment.}.  If there are two
%   fragments or more, the last fragment \meta{fragment}${}_l$ is
%   called the \emph{suffix} of the name \meta{name}.  In case, when
%   there is only one fragment, that is when $l=1$, the suffix is
%   empty.  The suffix is also empty, if |\jobname| ends with a
%   separator.  Thus with the default setting of \option{modesep} the
%   suffix  in file names |exam.tex|, |examsol-.tex|, |exam-sol-.tex| is empty.
%
%   If the suffix \meta{suffix} is among the suffixes,
%   recognized by \latexclass{ngetest}, the mode is set to the value,
%   corresponding to \meta{suffix}.
%
%   Initially class \latexpackage{ngetest} recognizes three suffixes:
%   suffixes |ans| and |sol| turn on mode \mode{answers}, and suffix
%   |key| turns on mode \mode{key}.  More mode-suffix pairs may be
%   declared in the configuration file \latexfile{nge.cfg} file with
%   the help of |\NGE@DeclareModeSuffix| command (see
%   \ref{sec:user-config-cfg}).
% \item If the mode is still undefined after step 2 (in case of an
%   unrecognized or an empty suffix), the default mode for
%   \latexclass{ngetest} is used.  Initially the default mode is set
%   to \mode{test}.  This setting may be changed in the configuration
%   file \latexfile{nge.cfg}, see section \ref{sec:user-config-cfg}
%   for details.
% \item After the document processing mode is determined its value is
%   stored in macro |\NGEmode|.
% \end{enumerate}
%  \todo{provide reference to \latexfile{nge.cfg}}
%
% 
% \paragraph{Conditional inclusion of text.}
%
% \DescribeMacro{\NGEmode}
% Once \latexpackage{ngetest} is loaded and its mode determined, the
% mode name is kept in macro |\NGEmode|.
% \begin{warning}
%   Do not change the value of |\NGEmode|!  Modifying it is not going
%   to change the \latexclass{ngetest}'s mode, which has been
%   determined and set before |\NGEmode| is initialized, but it may
%   unpredictably change the behaviour of other commands in
%   \latexclass{ngetest} or even break them.
% \end{warning}
% \DescribeMacro{\ifNGEmode}
% The value of |\NGEmode| may be inspected and used for conditional
% test processing.  For this purpose \latexclass{ngetest} provides the
% conditional |\ifNGEmode|.  This macro accepts three arguments
% \begin{Verbatim}[commandchars=\+\{\}, gobble=4]
%   \ifNGEmode+{+meta{mode}+}+{+meta{YES}+}+{+meta{NO}+}
% \end{Verbatim}
% if \meta{mode} is the current mode of \latexpackage{ngetest}, then
% part \meta{YES} is executed, otherwise part \meta{NO} is executed.
%
% \DescribeMacro{\iftestmode}
% \DescribeMacro{\ifanswersmode}
% \DescribeMacro{\ifkeymode}
% In addition \latexpackage{ngetest} provides three commands
% |\iftestmode|, |\ifanswersmode|, and |\ifkeymode|, which abbreviate
% most frequent usages of |\ifNGEmode|.  Command |\iftestmode| accepts
% one argument
% \begin{Verbatim}[gobble=4, commandchars=\+\{\}]
%   \iftestmode+{+meta{ARG}+}
% \end{Verbatim}
% and executes \meta{ARG} only if the current mode is \mode{test}, otherwise
% it does nothing.  Commands |\ifanswersmode| and |\ifkeymode| behave
% similarly in modes \mode{answers} and \mode{key} respectively.
% \todo[inline]{Add here warning about the blanks to watch out before
%   and after these commands, but experiment first.}
%   
%
% In addition to generic command |\ifNGEmode| and its derivatives for
% conditional execution of code or for conditional inclusion of 
% fragments of text depending on the current mode, \latexclass{ngetest} also
% provides several specialized environments, whose behaviour depends
% on the current mode.
%
% \DescribeMacro{testcomment}
% \DescribeMacro{answerscomment}
% \DescribeMacro{keycomment}
% Environments |testcomment|, |answerscomment| and |keycomment| reveal
% their content only in their respective modes.  Part of the source
% file, enclosed between |\begin{testcomment}| and |\end{testcomment}|
% is processed by \LaTeX{} only when \latexpackage{ngetest} is in mode
% \mode{test} and is skipped in all other modes.  Environments
% |answerscomment| and |keycomment| behave similarly in modes
% \mode{answers} and \mode{key} respectively.  Semantically these
% three environments provide comments to users of the document from
% the documents creator.  For example, |keycomment| may be used to
% typeset marking instructions, whereas |answerscomment| may be used
% to for discussion of typical errors in asnswers and solutions.  To
% simplify this usage these comment environments are configured by
% default to typeset their content in italic font\todo{check this in
%   default settings!} (see \todo{provide reference!}).  
% 
% 
%
% \paragraph{Changing separator.}\label{page:modesep}
% \todo[inline]{Rewrite and find an appropriate place for this paragraph.}
%
% \paragraph{To be rewritten}
% If no mode is specified explicitely, class \latexpackage{ngetest}
% tries to determine the mode by inspecting the file name.  If the
% file name has the form \meta{root}-\meta{suffix}|.tex|, then
% \latexclass{ngetest} compares \meta{suffix} agains the list of known
% suffixes and set the mode accordingly: for suffixes |ans| and |sol|
% mode |answers| is set and for suffix |key| mode |key| is selected.
% In all other cases, including the case when no suffix is present,
% the mode is set to the default value: |test|.
% If the mode is given explicitely, no guessing is performed.
% 
% The separator between \meta{root} and \meta{suffix} may be set to
% any character \meta{char} by specifying option |modesep=|\meta{char}.
% In case when the file name contains several occurrences of the
% separating character, it is broken by them characters into several
% fragments, and \meta{suffix} is then the last, 
% the tailing, fragment.  In case when there are no separating
% characters in the filename, \meta{suffix} is empty.  Thus filenames
% |exam-sol.tex| and |exam-1-sol.tex| have suffix |sol| and in
% filenames |exam.tex|, |exam-.tex|, and |exam--.tex| the suffix is empty. 
% In the former case the mode will be set by the guessing function to
% |answers| and in the latter the default mode, |test|, will be used.
% The default value for \option{modesep} is |-|.
% 
% Not all tex installations can handle filenames with spaces. So it's
% better to avoid them.  Watch out for using both |-| and |_| in the
% same filename.  We assume that modesep is a nonblank character.  One
% cannot use braces in the options line.
%
% \subsection{Configuring packages}
% \label{sec:user-config}
%
% \subsubsection{File \latexfile{nge.cfg}}
% \label{sec:user-config-cfg}
%
% Most of the aspects of \latexclass{ngetest}'s behaviour may be
% configured in document's preamble except for mode determining
% mechanism.  By the time \LaTeX{} starts processing commands in
% document's preamble, document's class is already loaded and
% \latexclass{ngetest}'s mode is already determined.
%
%\todo[inline]{add an example how to add system wide cfg file to local cfg file}
%
% \StopEventually{\PrintChanges\PrintIndex}
% \section{\LaTeX{} code}
% \label{sec:code}
%
%\iffalse
%<*ngetest>
%\fi
% 
% All the classes and styles in this package rely on \LaTeXe.  No
% support for earlier versions of \LaTeX{} is provided.
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}
\ProvidesClass{ngetest}
%    \end{macrocode}
% We reserve prefix |NGE| for internal definitions in \nged\ class
% and style files.
%
% \subsection{Options and modes}
% \label{sec:code-ngetest-configuration}
%
% Package \latexpackage{ifthen} provides useful control structures.
%    \begin{macrocode}
\RequirePackage{ifthen}
%    \end{macrocode}
% Options for the class \latexclass{ngetest} itself are specified with
% the help of package \latexpackage{pgfkeys} and processed with the
% help of package \latexpackage{pgfopts}.
%    \begin{macrocode}
%%\RequirePackage{pgfkeys}        % loaded by pgfopts
\RequirePackage{pgfopts}
%    \end{macrocode}
% All class options, processed with the help of package
% \latexpackage{pgfopts}, in particular, all value accepting options,
% must precede declarations of class options, processed by \LaTeX{}
% kernel.   Keys for these options are stored at  common path
% |/NGE/test/options|.  
%
% \subsubsection{Modes}
% \label{sec:code-ngetest-mode1}
% \paragraph{Modes.}
% The code for option \option{mode} accepts only recognized
% mode values,
%    \begin{macrocode}
\pgfqkeys{/NGE/test/options/mode}{%
  .value required,
  .is choice,
%    \end{macrocode}
% all unknown mode values are ignored and a warning is issued
%    \begin{macrocode}
  .unknown/.code={%
    \PackageWarning{ngetest}{%
      Ignoring unknown mode '\pgfkeyscurrentname'}}}
%    \end{macrocode}
% Now let us declare mode values, recognized by
% \latexclass{ngetest}.  It is convenient in this declaration also to
% define commands and environments whose execution depends on the mode
% of \latexclass{ngetest}.  
%
% After all the options are processed and
% class mode is determined, its value is kept in macro |\NGEmode|.
% \macro{\ifNGEmode} The following macro provides a conditional
% command, which accepts three arguments
% \begin{Verbatim}[gobble=4,commandchars=\\\{\}]
%   \bslash{}ifNGEmode\{\meta{mode}\}\{\meta{YES}\}\{\meta{NO}\}
% \end{Verbatim}
% and executes part \meta{YES}, if \meta{mode} coincides with
% |\NGEmode|, otherwise it executes part \meta{NO}.
%    \begin{macrocode}
\newcommand{\ifNGEmode}[3]{\ifthenelse{\equal{\NGEmode}{#1}}{#2}{#3}}
%    \end{macrocode}
% \macro{\NGE@DeclareMode} Macro |\NGE@DeclareMode| accepts one
% argument --- the name of the mode.
%    \begin{macrocode}
\newcommand{\NGE@DeclareMode}[1]{%
  \pgfkeys{/NGE/test/options/mode/#1/.code={\def\NGEmode{#1}}}%
%    \end{macrocode}
% The declaration of each mode also defines a useful macro of one
% argument, which executes its argument only if \latexclass{ngetest}
% is in this particular mode, otherwise the argument is ignored.
%    \begin{macrocode}
  \expandafter\newcommand\expandafter{\csname if#1mode\endcsname}[1]{%
    \ifNGEmode{#1}{##1}{}}
%    \end{macrocode}
% It is also useful to have a mode-specific environment for each mode
% with similar property: the contents of this environment is visible
% only in the mode, to which it is specific, in all other modes this
% content is completely ignored. 
%    \begin{macrocode}
  \NGE@DeclareModeComment{#1}%
%    \end{macrocode}
% Such an environment is defined with the help of package
% \latexpackage{versions} and we have to defer configuration of mode
% comments until this package is loaded.
%    \begin{macrocode}
  \AtEndOfClass{\ifNGEmode{#1}{}{\excludeversion{#1comment}}}}
%    \end{macrocode}
%    \begin{macrocode}
\newcommand\NGE@par{\par}
\newcommand{\NGE@DeclareModeComment}[1]{
  \pgfqkeys{/NGE/test/modes/#1/comment}{%
    header/.initial={},
    font/.initial={},
    precommenthook/.initial={},
    postcommenthook/.initial={},
    par/.initial={},
    inline/.code={\def\NGE@par{\relax}}
  }
  \newenvironment{#1comment}[1][]{%
    \pgfqkeys{/NGE/test/modes/#1/comment}{##1}%
    \pgfkeysvalueof{/NGE/test/modes/#1/comment/par}%
    \pgfkeysvalueof{/NGE/test/modes/#1/comment/header}%
    \pgfkeysvalueof{/NGE/test/modes/#1/comment/font}%
    \pgfkeysvalueof{/NGE/test/modes/#1/comment/precommenthook}%
  }{%
    \pgfkeysvalueof{/NGE/test/modes/#1/comment/postcommenthook}%
    \pgfkeysvalueof{/NGE/test/modes/#1/comment/par}%
  }
}
%    \end{macrocode}
%
% \paragraph{Mode separators.}
% \macro{\NGE@modesep} Similarly, the code for option \option{modesep}
% merely stores the given value in macro |\NGE@modesep|.
%    \begin{macrocode}
\pgfqkeys{/NGE/test/options/modesep}{%
  .value required,
  .is choice,
  .unknown/.code={\let\NGE@modesep=\pgfkeyscurrentname},
  comma/.code={\def\NGE@modesep{,}},
  equals/.code={\def\NGE@modesep{=}},
}
%    \end{macrocode}
%
% \paragraph{Configuration.}
%    \begin{macrocode}
\NGE@DeclareMode{test}
\NGE@DeclareMode{answers}
\NGE@DeclareMode{key}
%    \end{macrocode}
%
%    \begin{macrocode}
\pgfqkeys{/NGE/test/jobname/suffix}{%
  .is choice,
  .unknown/.code={\relax},
}
%    \end{macrocode}
%    
%    \begin{macrocode}
\pgfqkeys{/NGE/test/modes/.configure}{%
  default/.style={/NGE/test/options/mode/.initial=#1},
  modesep/.style={/NGE/test/options/modesep=#1},
  modesuffix/.style 2 args={%
    /NGE/test/jobname/suffix/#2/.style={%
      /NGE/test/options/mode=#1%
    }
  }
}
\newcommand{\NGE@ConfigureModes}[1]{%
  \pgfqkeys{/NGE/test/modes/.configure}{#1}}
\newcommand{\NGEConfigureModeComment}[2]{%
  \pgfqkeys{/NGE/test/modes/#1/comment}{#2}}
%    \end{macrocode}
%
%
%
%
%    \begin{macrocode}
\NGE@ConfigureModes{default=test,modesep={-},
  modesuffix={answers}{ans},
  modesuffix={answers}{sol},
  modesuffix={key}{key}}
%    \end{macrocode}
%
%    \begin{macrocode}
\NGEConfigureModeComment{test}{font={\sffamily},par={\NGE@par}}
\NGEConfigureModeComment{answers}{font={\sffamily},par={\NGE@par}}
\NGEConfigureModeComment{key}{font={\sffamily},par={\NGE@par}}
%    \end{macrocode}
%
%
%    \begin{macrocode}

%    \end{macrocode}
%    \begin{macrocode}

%    \end{macrocode}
%
%    \begin{macrocode}
\InputIfFileExists{nge.cfg}{}{}
%    \end{macrocode}
%
% \subsubsection{Options for loaded packages}
% \label{sec:code-ngetest-options}
%
% These options are for \latexclass{article} class, they are passed
% directly to it.
%    \begin{macrocode}
\DeclareOption{a4paper}{\PassOptionsToClass{a4paper}{article}}
\DeclareOption{a5paper}{\PassOptionsToClass{a5paper}{article}}
\DeclareOption{b5paper}{\PassOptionsToClass{b5paper}{article}}
\DeclareOption{letterpaper}{\PassOptionsToClass{letterpaper}{article}}
\DeclareOption{legalpaper}{\PassOptionsToClass{legalpaper}{article}}
\DeclareOption{executivepaper}{%
  \PassOptionsToClass{executivepaper}{article}}
\DeclareOption{landscape}{\PassOptionsToClass{landscape}{article}}
\DeclareOption{10pt}{\PassOptionsToClass{10pt}{article}}
\DeclareOption{11pt}{\PassOptionsToClass{11pt}{article}}
\DeclareOption{12pt}{\PassOptionsToClass{12pt}{article}}
\DeclareOption{oneside}{\PassOptionsToClass{oneside}{article}}
\DeclareOption{twoside}{\PassOptionsToClass{twoside}{article}}
\DeclareOption{draft}{\PassOptionsToClass{draft}{article}}
\DeclareOption{final}{\PassOptionsToClass{final}{article}}
\DeclareOption{titlepage}{\PassOptionsToClass{titlepage}{article}}
\DeclareOption{notitlepage}{\PassOptionsToClass{notitlepage}{article}}
\DeclareOption{onecolumn}{\PassOptionsToClass{onecolumn}{article}}
\DeclareOption{twocolumn}{\PassOptionsToClass{twocolumn}{article}}
\DeclareOption{leqno}{\PassOptionsToClass{leqno}{article}}
\DeclareOption{fleqn}{\PassOptionsToClass{fleqn}{article}}
\DeclareOption{openbib}{\PassOptionsToClass{openbib}{article}}
%    \end{macrocode}
% These options are for \latexpackage{versions} package, they are passed
% directly to it.
%    \begin{macrocode}
\DeclareOption{nogroup}{\PassOptionsToPackage{nogroup}{versions}}
\DeclareOption{tracing}{\PassOptionsToPackage{tracing}{versions}}
%    \end{macrocode}
% All other unrecognized options are handled by package
% \latexpackage{pgfopts}.  The following line suppresses the "unused
% option" warning.
%    \begin{macrocode}
\DeclareOption*{\relax}
%    \end{macrocode}
%
%
%
%
% 
%    \begin{macrocode}
\ExecuteOptions{}%
\ProcessPgfOptions{/NGE/test/options}%
\ProcessOptions%
%    \end{macrocode}
%
%    \begin{macrocode}
\LoadClass{article}%
%    \end{macrocode}
%
%    \begin{macrocode}
\RequirePackage{versions}%
%    \end{macrocode}
%
% \subsubsection{Determining the document processing mode}
% \label{sec:code-ngetest-mode2}
%
% If the mode was not specified explicitely as an option (or if the
% value for option \option{mode} was not recognized as a legitimate
% mode name), we need to determine the mode from the file name.
% \macro{\NGE@ParseJobname} Macro |\NGE@ParseJobname| receives one
% argument and views the contents of macro |\jobname| as a list of
% fragments, using the received argument as a separator between
% list elements.  It inspects the last fragment and sets the class
% mode depending on whether the contents is of the last fragment is
% one of the recognized mode suffixes.
%    \begin{macrocode}
\newcommand{\NGE@ParseJobname}[1]{%
%    \end{macrocode}
% \begin{enumerate}\renewcommand{\labelenumi}{\itshape Step \theenumi).}
% \item The parsing macro |\NGE@Next| determines the next fragment as
%   everything preceding the next instance of the separator.  It may
%   happen, that the contents of |\jobname| does include any
%   separators at all, or even if it does, unless the contents
%   |\jobname| end notwalks
%   Macros in the steps belowPrepare |\jobname| for parsing.  We
%   prepare the contents of |\jobname| for parsing by converting it
%   into a list of fragments, separated by the string, stored in
%   |\NGE@modesep|.  Then we parse |\jobname| list element by list
%   element, processing each of them in turn.  We find the next
%   element by searching for the next instance of the separator in
%   |\jobname|.  In order to be able to find the last element in the
%   list we append to |\jobname| one more copy of separator and then
%   mark the end of the list by a token, which can never occur in
%   |\jobname|, and append one more separator.
%    \begin{macrocode}
  \edef\NGE@jobname{\jobname#1\noexpand\@nil#1}
%    \end{macrocode}
% \macro{\NGE@Next} Macro |\NGE@Next| walks through fragments of
% |\jobname| one by one, and applies macro |\NGE@ProcessFragment| to
% each fragment, except for the end-of-list marker.
%    \begin{macrocode}
  \def\NGE@Next##1#1{%
    \def\NGE@temp{##1}%
    \ifx\NGE@temp\@nnil\else\NGE@ProcessFragment{##1}%
                            \expandafter\NGE@Next\fi}%
%    \end{macrocode}
% \macro{\NGE@ProcessFragment} We just need to adjust the definition
% of |\NGE@ProcessFragment| to our needs.
%    \begin{macrocode}
  \def\NGE@ProcessFragment##1{%
%    \end{macrocode}
% The first fragment is the root of the file name, it cannot be a
% suffix, so we store it separately in key |/NGE/test/jobname/root|
%    \begin{macrocode}
    \pgfkeys{/NGE/test/jobname/root/.initial={##1}}%
%    \end{macrocode}
% For all other fragments, if there are any, we merely store the
% current fragment in macro |\NGE@suffix| in case it will turn out to
% be the last fragment.
%    \begin{macrocode}
    \let\NGE@ProcessFragment=\NGE@Suffix}%
  \def\NGE@Suffix##1{\def\NGE@suffix{##1}}%
  \def\NGE@suffix{}%
%    \end{macrocode}
% All the auxiliary commands have been defined, it is time
% to do the actual parsing.
%    \begin{macrocode}
  \expandafter\NGE@Next\NGE@jobname}
%    \end{macrocode}
% \end{enumerate}
% This completes the definition of |\NGE@ParseJobname|
% Note, that it is possible to define all the auxiliary commands for
% parsing directly, using the value of |\NGE@modesep| and some
% |\expandafter| acrobatics, but I believe it is more transparent and
% robust to solve this problem by delegating it to \TeX's parsing
% engine, that's why this approach was chosen.
%
% Now we can determine the mode, if it has not been set with options.
%    \begin{macrocode}
\@ifundefined{NGEmode}{%
  \ClassInfo{ngetest}{Document mode is not given,%
    deriving it from the file name}
%    \end{macrocode}
% \macro{\NGE@mode}
% First we set |\NGE@mode| to default value
%    \begin{macrocode}
  \pgfkeys{/NGE/test/options/mode/.get=\NGEmode}
%    \end{macrocode}
% and then determine the suffix and see, whether the suffix is
% associated with another mode.  Before determining the suffix,
% however, we need to prepare |\NGE@modesep| for |\jobname| parsing,
% since the characters in |\jobname| have category 12 (``other''),
% whereas |\NGE@modesep| may contain characters of other categories.
%    \begin{macrocode}
  \@onelevel@sanitize\NGE@modesep
%    \end{macrocode}
% Now we extract the suffix from |\jobname| and if it is nonempty,
% see, whether |\NGE@mode| needs to be changed.
%    \begin{macrocode}
  \expandafter\NGE@ParseJobname\expandafter{\NGE@modesep}%
  \ifthenelse{\equal{\NGE@suffix}{}}{}{%
    \pgfkeys{/NGE/test/jobname/suffix=\NGE@suffix}}%
}{}
%    \end{macrocode}
% From this point on the processing mode is determined.
%    \begin{macrocode}
\typeout{Using mode \NGEmode}
%    \end{macrocode}
% 
%
%
%
% \subsection{Tasks}
% \label{sec:code-ngetest-tasks}
%
%
% 
% In this section we define the generic environment for problems and
% questions, and provide means for its customization.
%
%   By default all the tasks are numbered consecutively with the help of
%   counter |NGEtask|.
%    \begin{macrocode}
\newcounter{NGEtask}
\newcounter{NGE@task}
%    \end{macrocode}
% We also introduce counters for keeping track of number of points,
% assigned to each task.
%    \begin{macrocode}
\newcounter{NGEtaskpoints}
\newcounter{NGEpointstotal}
%    \end{macrocode}
%    \begin{macrocode}
\newboolean{NGEshowtaskpoints}
\newboolean{NGEunnumberedtask}
%    \end{macrocode}
%    \begin{macrocode}
\pgfqkeys{/NGE/test/tasks/.styles}{
  .common/.style={
    .unknown/.code={%
      \ClassError{ngetest}{unknown task option '\pgfkeyscurrentname'}{}},
    pretaskhook/.initial={},
    pretaskhook/.value required,
    posttaskhook/.initial={},
    posttaskhook/.value required,
    .process options/.code={}},
  .points/.style={
    /NGE/test/tasks/.options/.declare=points,
%    points/.initial=0,
%    points/.value required,
%    showpoints/.initial=true,
%    showpoints/.value forbidden,
%    hidepoints/.style={showpoints/.initial={false}},
%    hidepoints/.value forbidden,
%    nopoints/.style={hidepoints, points=0},
%    nopoints/.value forbidden,
    .process options/.append code={%
      \setboolean{NGEshowtaskpoints}{%
        \pgfkeysvalueof{\NGE@taskpath/showpoints}}%
      \pgfkeysalso{points/.get=\NGEtaskpoints}%
      \ifthenelse{\equal{\NGEtaskpoints}{parts}}
      {\ifthenelse{\boolean{NGEshowtaskpoints}}{%
          \pgfkeys{/NGE/test/tasks/.parts/options/showpoints}}{}%
        \pgfkeysifdefined{/NGE/test/tasks/\theNGE@task/points}
        {\setcounter{NGEtaskpoints}
          {\pgfkeysvalueof{/NGE/test/tasks/\theNGE@task/points}}}
        {\setcounter{NGEtaskpoints}{0}}}
      {\setcounter{NGEtaskpoints}{\NGEtaskpoints}}%
      \addtocounter{NGEpointstotal}{\value{NGEtaskpoints}}%
      \ifthenelse{\boolean{NGEshowtaskpoints}}
      {\def\NGEtaskpoints{\theNGEtaskpoints\space point%
          \ifthenelse{\value{NGEtaskpoints}=1}{}{s}}}
      {\def\NGEtaskpoints{}}%
      \ifthenelse{\equal{\pgfkeysvalueof{\NGE@taskpath/points}}{parts}}
      {\pgfkeysalso{%
          .begin/.append code={\setcounter{NGEtaskpoints}{0}},
          .end/.prefix code={%
            \protected@write{\NGE@out}{}{%
              \string\pgfkeys{%
                /NGE/test/tasks/\theNGE@task/points/.initial={%
                  \theNGEtaskpoints}}}}}}{}}},
  .note/.style={
    note/.initial={},
    note/.value required,
    .process options/.append code={\pgfkeysalso{note/.get=\NGEtasknote}}},
  .notewithpoints/.style={
    /NGE/test/tasks/.styles/.note,
    /NGE/test/tasks/.styles/.points,
    .process options/.append code={
      \ifthenelse{\boolean{NGEshowtaskpoints}}
      {\ifx\NGEtasknote\@empty
          \def\NGEtasknotewithpoints{\NGEtaskpoints}
        \else
          \def\NGEtasknotewithpoints{\NGEtasknote,\space\NGEtaskpoints}
        \fi}
      {\edef\NGEtasknotewithpoints{\NGEtasknote}}}},
  .skip/.style={
    skip/.initial={\z@skip},
    skip/.value required,
  },
  plain/.style={
    /NGE/test/tasks/.styles/.common,
    /NGE/test/tasks/.styles/.points},
  plain/create environment/.code={
    \setboolean{NGE@createtaskenvironment}{false}},
  theorem/.style={
    /NGE/test/tasks/.styles/.common,
    /NGE/test/tasks/.styles/.notewithpoints,
    .process options/.append code={%
      \ifx\NGEtasknotewithpoints\@empty\else%
      \pgfkeysalso{.begin/.append code={[\NGEtasknotewithpoints]}}\fi}},
  theorem/create environment/.code={
    \setboolean{NGE@createtaskenvironment}{false}},
  nge/create environment/.code={
    \setboolean{NGE@createtaskenvironment}{true}},
  nge/.style={
    /NGE/test/tasks/.styles/.common,
    /NGE/test/tasks/.styles/.notewithpoints,
    name/.initial=Question,
    name/.value required,
    head/.initial={\NGEtaskheadmark},
    head/.value required,
    head/.unknown/.code={%
      \ClassError{ngetest}
      {unknown task option 'head/\pgfkeyscurrentname'}{}},
    head/font/.initial={\bfseries},
    head/font/.value required,
    head/punctuation/.initial={.},
    head/punctuation/.value required,
    head/afterskip/.initial={},
    head/afterskip/.value required,
    note/.unknown/.code={%
      \ClassError{ngetest}
      {unknown task option 'note/\pgfkeyscurrentname'}{}},
    note/font/.initial={\itshape},
    note/font/.value required,
    font/.initial={\normalfont},
    font/.value required,
    counter/.initial=NGEtask,
    counter/.value required,
    unnumbered/.initial=false,
    unnumbered/.style={unnumbered/.initial=true},
    unnumbered/.value forbidden,
    numbered/.style={unnumbered/.initial=false},
    numbered/.value forbidden,
    tag/.initial={},
    tag/.style={tag/.initial={##1}, unnumbered},
    tag/.value required,
    preskip/.initial={\topsep},
    preskip/.value required,
    postskip/.initial={\topsep},
    postskip/.value required,
    .process options/.append code={%
      \pgfkeysalso{
        name/.get=\NGEtaskname,
        font/.get=\NGEtaskfont,
        head/font/.get=\NGEtaskheadfont,
        head/punctuation/.get=\NGEtaskheadpunctuation,
        head/afterskip/.get=\NGEtaskheadafterskip,
        head/.get=\NGEtaskhead,
        note/font/.get=\NGEtasknotefont,
        counter/.get=\NGEtaskcounter,
        tag/.get=\NGEtasktag}
      \setboolean{NGEunnumberedtask}{\pgfkeysvalueof{\NGE@taskpath/unnumbered}}
      \ifthenelse{\boolean{NGEunnumberedtask}}
      {\ifthenelse{\equal{\NGEtasktag}{}}
        {\edef\NGEtasknamewithtag{\NGEtaskname}}
        {\edef\@currentlabel{\NGEtasktag}
          \ifthenelse{\equal{\NGEtaskname}{}}
          {\edef\NGEtasknamewithtag{\NGEtasktag}}
          {\def\NGEtasknamewithtag{\NGEtaskname\space\NGEtasktag}}}}
      {\refstepcounter{\pgfkeysvalueof{\NGE@taskpath/counter}}%
        \def\NGEtasktag{%
          \csname the\pgfkeysvalueof{\NGE@taskpath/counter}\endcsname}
        \ifx\NGEtaskname\@empty
          \def\NGEtasknamewithtag{\NGEtasktag}
        \else
          \def\NGEtasknamewithtag{\NGEtaskname\space\NGEtasktag}
        \fi}
      \ifx\NGEtasknamewithtag\@empty%
        \ClassWarning{ngetest}{empty task header}\fi
    \def\NGEtaskheadmark{%
      \begingroup\NGEtaskheadfont\NGEtasknamewithtag\endgroup%
      \ifx\NGEtasknotewithpoints\@empty\else%
        \space(\begingroup\NGEtasknotefont%
          \NGEtasknotewithpoints\endgroup)\fi%
      \NGEtaskheadpunctuation}},
  .begin/.code={%
    \begin{trivlist}%
    \item[\NGEtaskhead]\NGEtaskheadafterskip\NGEtaskfont},
  .end/.code={\end{trivlist}}}}
%    \end{macrocode}
%    \begin{macrocode}
%    \end{macrocode}
%    \begin{macrocode}
%    \end{macrocode}
%\todo[inline]{mixing theorem environments from various packages is probably
%  not a very good idea}
%    \begin{macrocode}
%    \end{macrocode}
%    \begin{macrocode}
\newcommand{\taskstyle}[1]{
  \pgfkeysifdefined{/NGE/test/tasks/.styles/#1/.@cmd}{
    \def\NGE@taskstyle{#1}}{%
    \ClassError{ngetest}{unknown task style '#1'}{%
      Task styles have to be declared before they can be used.
      \MessageBreak
      Place the declaration '\@backslashchar newtaskstyle{#1}' 
      in the document's preamble
      \MessageBreak
      before the first instance of '\@backslashchar taskstyle{#1}'}}}
%    \end{macrocode}
%    \begin{macrocode}
\taskstyle{nge}
%    \end{macrocode}
%\todo[inline]{more flexible error handling, allow for several styles
% based on the same package}
% \todo{Add if star? no need to!}
%    \begin{macrocode}
\newboolean{NGE@createtaskenvironment}
\newcommand{\newtask}[2][]{%
  \pgfkeys{/NGE/test/tasks/.styles/\NGE@taskstyle/create environment}
  \@ifundefined{#2}
  {\ifthenelse{\boolean{NGE@createtaskenvironment}}
    {\pgfqkeys{/NGE/test/tasks/#2}{
        .begin/.code={},
        .end/.code={},
        /NGE/test/tasks/.styles/\NGE@taskstyle,
        #1}
      \newenvironment{#2}{}{}}
    {\ClassError{ngetest}{environment `#2' does not exist}
      {Before environment `#2' can be used as a task
        it has to be declared.
        \MessageBreak
        Put the declaration of '#2' in the document's  preamble
        \MessageBreak
        before `\@backslashchar newtask{#2}'}}}
  {\ifthenelse{\boolean{NGE@createtaskenvironment}}
    {\ClassError{ngetest}{environment '#2' already exists}
      {Existing environments cannot be used with task style
        '\NGE@taskstyle'\MessageBreak
       If you want to use this environment as a task,\MessageBreak
       use it with task style 'plain' or other specialized task styles
       \MessageBreak
       listed in the documentation.\MessageBreak
       If you want to create a new task with style '\NGE@taskstyle'
       \MessageBreak
       then choose a new environment name, which is not a name
       \MessageBreak
       of an existing environment.}}
   {\ClassInfo{ngetest}{redefining environment '#2'}
     \expandafter\let\csname NGE@#2\expandafter\endcsname%
       \csname #2\endcsname
     \expandafter\let\csname endNGE@#2\expandafter\endcsname%
       \csname end#2\endcsname
     \pgfqkeys{/NGE/test/tasks/#2}{%
       .begin/.code={\begin{NGE@#2}},
       .end/.code={\end{NGE@#2}},
       /NGE/test/tasks/.styles/\NGE@taskstyle,
       #1}}}
  \renewenvironment{#2}[1][]{%
     \stepcounter{NGE@task}%
     \def\NGE@taskpath{/NGE/test/tasks/#2}%
     \pgfqkeys{\NGE@taskpath}{##1,%
       .process options}
     \pgfkeysvalueof{\NGE@taskpath/pretaskhook}%
     \pgfkeys{\NGE@taskpath/.begin}%
    }{%
     \pgfkeys{\NGE@taskpath/.end}%
     \pgfkeysvalueof{\NGE@taskpath/posttaskhook}%
}%
}
%    \end{macrocode}
%    \begin{macrocode}
%    \end{macrocode}
%    \begin{macrocode}
%    \end{macrocode}
%
% 
%    \begin{macrocode}
%    \end{macrocode}
%    \begin{macrocode}
%    \end{macrocode}
%    \begin{macrocode}
%    \end{macrocode}
%    
%    \begin{macrocode}
%    \end{macrocode}
%
%    \begin{macrocode}
%    \end{macrocode}
% It is users responsibility to guarantee that counter exists.
%^^A see also
%^^A http://www.tex.ac.uk/cgi-bin/texfaq2html?label=isitanum
%    \begin{macrocode}
%    \end{macrocode}
%    \begin{macrocode}
%    \end{macrocode}
% \todo[inline]{put this text where it belongs}   
% Redefine macro |\theNGEtaskpoints| to expand number n to ``n points''.
%
% Point processing is done with the help of \latexpackage{pgfkeys}
% package.  Initially each task is assigned 0 points by default.  The
% number of points, assigned to a particular task may be specified
% with points option for |NGEtask| environment and the default
% assignment may be changed with the help of |\NGEtasks|
% command.
%
% We also provide a quick way to turn off points counting temporarily
% for a particular task.
%
%
% \subsubsection{Parts}
% \label{sec:code-tasks-parts}
%    \begin{macrocode}
\newcounter{NGE@taskpartdepth}
\newcounter{taskpart}[NGE@task]
\renewcommand{\thetaskpart}{\alph{taskpart}}
\newcommand{\labeltaskpart}{\thetaskpart).}
\newcounter{taskppart}[taskpart]
\renewcommand{\thetaskppart}{\arabic{taskppart}}
\renewcommand{\p@taskppart}{\thetaskpart}
\newcommand{\labeltaskppart}{$\hbox{\p@taskppart}_{\thetaskppart}$).}
\newcounter{taskpppart}[taskppart]
\renewcommand{\thetaskpppart}{\Alph{taskpppart}}
%\renewcommand{\p@taskpppart}{$\hbox{\thetaskpart}_{\thetaskppart}$-\thetaskpppart).}
\renewcommand{\p@taskpppart}{}
\newcommand{\labeltaskpppart}{(\thetaskpppart)}
\newcounter{taskpartpoints}
%    \end{macrocode}
%    \begin{macrocode}
\newboolean{NGE@showtaskpartpoints}
\newenvironment{parts}[1][]{%
  \let\part=\NGE@part%
  \stepcounter{NGE@taskpartdepth}%
  \ifthenelse{\value{NGE@taskpartdepth}>3}{%
    \ClassError{ngetest}{%
      parts nesting level is too deep,\MessageBreak
      only three levels are allowed}{}}{}
  \pgfkeys{/NGE/test/tasks/.parts/depth=\arabic{NGE@taskpartdepth}}%
  \pgfqkeys{/NGE/test/tasks/.parts/options}{#1,
  showpoints/.get=\NGE@showpointstemp}%
  \setboolean{NGE@showtaskpartpoints}{\NGE@showpointstemp}%
%    \pgfkeysvalueof{/NGE/test/tasks/.parts/options/showpoints}}%
  \begin{list}{\NGE@labeltaskpart}{%
      \renewcommand{\makelabel}[1]{\hss\llap{##1}}}}%
{\end{list}\addtocounter{NGE@taskpartdepth}{-1}}
\newcommand{\NGE@part}[1][]{%
  \pgfqkeys{/NGE/test/tasks/.part/options}{
    label/.initial={},
    .numbered,
    #1,
    points/.get=\NGEtaskpartpoints,
    label/.get=\NGE@taskpartlabel
  }%
%  \stepcounter{NGE@taskpart}%
\ifthenelse{\boolean{NGE@numberedtaskpart}}
{\refstepcounter{\NGE@taskpartcounter}}{}%
  \ifthenelse{\equal{\pgfkeysvalueof{\NGE@taskpath/points}}{parts}}
  {\addtocounter{NGEtaskpoints}{\NGEtaskpartpoints}}{}%
  \ifthenelse{\boolean{NGE@numberedtaskpart}}
  {\item\relax}{\item[\NGE@taskpartlabel]}%
  \ifthenelse{\boolean{NGE@showtaskpartpoints}}
  {}% remove after debugging!
{(\NGE@showpointscounter{taskpartpoints}) }%{}
}
%    \end{macrocode}
%    \begin{macrocode}
\pgfqkeys{/NGE/test/tasks/.parts/depth}{
  .is choice,
  .value required,
  1/.code={%
    \newcommand{\NGE@taskpartcounter}{taskpart}%
    \newcommand\NGE@labeltaskpart{\labeltaskpart}},
  2/.code={%
    \renewcommand{\NGE@taskpartcounter}{taskppart}%
    \renewcommand\NGE@labeltaskpart{\labeltaskppart}%
  },
  3/.code={%
    \renewcommand{\NGE@taskpartcounter}{taskpppart}%
    \renewcommand\NGE@labeltaskpart{\labeltaskpppart}}}
%    \end{macrocode}
%    \begin{macrocode}
\newcommand{\NGE@showpointscounter}[1]{%
  \arabic{#1} point\ifthenelse{\value{#1}=1}{}{s}}
%    \end{macrocode}
%
%
%    \begin{macrocode}
\pgfqkeys{/NGE/test/tasks/.options}{
  .declare/.is choice,
  .declare/.value required,
  .declare/.unknown/.code={%
    \ClassError{ngetest}{%
      Unknown option group `\pgfkeyscurrentname'}{}},
  .declare/points/.style={%
    points/.initial=0,
    points/.value required,
    showpoints/.initial=true,
    showpoints/.style={showpoints/.initial=true},
    showpoints/.value forbidden,
    hidepoints/.style={showpoints/.initial=false},
    hidepoints/.value forbidden,
    nopoints/.style={hidepoints, points=0},
    nopoints/.value forbidden}}
%    \end{macrocode}
%    \begin{macrocode}
\pgfqkeys{/NGE/test/tasks/.parts/options}{%
  /NGE/test/tasks/.options/.declare=points, hidepoints}
\newboolean{NGE@numberedtaskpart}
\pgfqkeys{/NGE/test/tasks/.part/options}{
  points/.initial={0},
  points/.value required,
  .numbered/.is if=NGE@numberedtaskpart,
  .numbered/.default=true,
  label/.style={.numbered=false,label/.initial=#1}
}
%    \end{macrocode}
%    \begin{macrocode}
%    \end{macrocode}
%
%    \begin{macrocode}
%    \end{macrocode}
% 
%
%    \begin{macrocode}
%    \end{macrocode}
%
% 
%    \begin{macrocode}
%    \end{macrocode}
%    \begin{macrocode}
\newwrite\NGE@out
\AtBeginDocument{%
  \InputIfFileExists{\jobname.nge}{}{}
  \ifthenelse{\boolean{@filesw}}{%
    \immediate\openout\NGE@out\jobname.nge%
    \immediate\write\NGE@out{\relax}}{}}
%    \end{macrocode}
%
%
%\iffalse
%<*hide>
%\fi
%
% \subsection{Answers and solutions}
% \label{sec:code-ngetest-answers}
%
% Everything below this line must not be visible in test mode.
% \begin{macro}{answer}
% In test mode everything enclosed between |\begin{answer}| and
% |\end{answer}| is skipped by \LaTeX.  In answers mode the actual job
% of |answer| is done by environment |NGEanswer|.
%    \begin{macrocode}
\pgfqkeys{/NGE/test/answer}{%
  name/.initial={Answer},
  font/.initial={\normalfont},
  head/font/.initial={\scshape},
  head/.initial={\NGEanswerhead},
  head/punctuation/.initial={:},
  head/afterskip/.initial={}
}
\newcommand{\NGEanswerhead}{%
  \ifthenelse{\equal{\pgfkeysvalueof{/NGE/test/answer/name}}{}}%
  {}{\begingroup\pgfkeysvalueof{/NGE/test/answer/head/font}%
    \pgfkeysvalueof{/NGE/test/answer/name}%
    \pgfkeysvalueof{/NGE/test/answer/head/punctuation}%
    \endgroup}}
\newenvironment{answer}[1][]
{\begin{trivlist}%
    \pgfqkeys{/NGE/test/answer}{#1}
  \item[\pgfkeys{/NGE/test/answer/head}]%
    \pgfkeysvalueof{/NGE/test/answer/head/afterskip}%
    \pgfkeysvalueof{/NGE/test/answer/font}\ignorespaces}
{\end{trivlist}}
\AtEndOfClass{\iftestmode{\excludeversion{answer}}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{NGEanswer} 
% At the moment |NGEanswer| is very simple, but I still have defined
% several components for the simplicity of customization.
%    \begin{macrocode}
%    \end{macrocode}
% \end{macro}
% In the same way one can define environments |solution| and |NGEsolution|.
% \begin{macro}{solution}
%
%    \begin{macrocode}
\pgfqkeys{/NGE/test/solution}{%
  name/.initial={Solution},
  font/.initial={\normalfont},
  head/font/.initial={\scshape},
  head/.initial={\NGEsolutionhead},
  head/punctuation/.initial={:},
  head/afterskip/.initial={}
}
\newcommand{\NGEsolutionhead}{%
  \ifthenelse{\equal{\pgfkeysvalueof{/NGE/test/solution/name}}{}}%
  {}{\begingroup\pgfkeysvalueof{/NGE/test/solution/head/font}%
    \pgfkeysvalueof{/NGE/test/solution/name}%
    \pgfkeysvalueof{/NGE/test/solution/head/punctuation}%
    \endgroup}}
\newenvironment{solution}[1][]
{\begin{trivlist}%
    \pgfqkeys{/NGE/test/solution}{#1}
  \item[\pgfkeys{/NGE/test/solution/head}]%
    \pgfkeysvalueof{/NGE/test/solution/head/afterskip}%
    \pgfkeysvalueof{/NGE/test/solution/font}\ignorespaces}
{\end{trivlist}}
\AtEndOfClass{\iftestmode{\excludeversion{solution}}}
%    \end{macrocode}   
% \end{macro}
% \begin{macro}{NGEsolution}
%
%    \begin{macrocode}
%    \end{macrocode}    
% \end{macro}
% In addition we enable instructor comments in answer mode, which are
% excluded by default.
% \begin{macro}{NGEcomment}
%    \begin{macrocode}
%    \end{macrocode}
% \end{macro}
% 
%    \begin{macrocode}
%    \end{macrocode}
% 
%
% \subsection{Marking guide}
% \label{sec:code-ngetest-marking-guide}
%
% In the same way we define commands and environments for the marking
% guide mode.
%    \begin{macrocode}
%    \end{macrocode}
% 
%    \begin{macrocode}
%\newenvironment{rubrics}{\begin{NGErubrics}}{\end{NGErubrics}}
%\newcounter{NGEtmp}
%\newenvironment{NGErubrics}{%
%  \pgfqkeys{/NGE/rubrics/.cd}{#1}\begin{description}}{\end{description}}
%\newcommand{\rubric}[1]{\setcounter{NGEtmp}{#1}\item[#1]}
%\ifthenelse{\boolean{NGEMarkingGuideMode}}{}{\excludeversion{rubrics}}
%    \end{macrocode}
%
%\iffalse
%</hide>
%\fi
%
% \subsection{Title page}
% \label{sec:code-ngetest-title-page}
%    \begin{macrocode}
\def\@author{}
\newcommand{\course}{\@dblarg\NGE@course}
\newcommand{\NGE@course}[2][]{%
  \gdef\NGE@shortcoursename{#1}\gdef\NGE@coursename{#2}}
\course{}
\newcommand{\instructor}[2][Instructor]{\author{#1: #2}}
%    \end{macrocode}
%    \begin{macrocode}
\ifthenelse{\boolean{@titlepage}}
{\renewcommand{\maketitle}{%
    \begin{titlepage}%
      \let\footnotesize\small
      \let\footnoterule\relax
      \let \footnote \thanks
      \null\vfil
      \vskip 60\p@
      \begin{center}%
      \ifthenelse{\equal{\NGE@coursename}{}}{}
      {\Large%
        \begin{tabular}[t]{c}%
          \NGE@coursename%
        \end{tabular}\par\vskip 3em}%
        {\LARGE \@title \par}%
        \vskip 3em%
        \ifthenelse{\equal{\@author}{}}{}
        {\large
          \lineskip .75em%
          \begin{tabular}[t]{c}%
            \@author
          \end{tabular}\par}%
        \vskip 1.5em%
        {\large \@date \par}%       % Set date in \large size.
      \end{center}\par
      \@thanks
      \vfil\null
    \end{titlepage}}}
{\renewcommand{\@maketitle}{%
    \newpage%
    \null%
    \vskip 2em%
    \begin{center}%
      \let \footnote \thanks%
      \ifthenelse{\equal{\NGE@coursename}{}}{}
      {\Large%
        \begin{tabular}[t]{c}%
          \NGE@coursename%
        \end{tabular}\par\vskip 1.5em}%
      {\LARGE \@title \par}%
      \vskip 1.5em%
      \ifthenelse{\equal{\@author}{}}{}
      {\large%
        \lineskip .5em%
        \begin{tabular}[t]{c}%
          \@author%
        \end{tabular}\par}%
      \vskip 1em%
      {\large \@date}%
    \end{center}%
    \par%
    \vskip 1.5em}}
%    \end{macrocode}
%    \begin{macrocode}
\pgfkeys{/NGE/test/information/.unknown/.style={%
    /NGE/test/information/\pgfkeyscurrentname/.initial={#1}}}
\newcommand{\NGEtestinformation}[1]{%
  \pgfqkeys{/NGE/test/information}{#1}}
%    \end{macrocode}
% 
%\iffalse
%<*hide>
%\fi
% \subsubsection{Headers}
% \label{sec:code-ngetest-headers}
%\iffalse
%</hide>
%</ngetest>
%\fi
% 
% \todo[inline]{Add to index references to \latexpackage{pgfkeys} tree used}
% \todo[inline]{Look up indexing commands for \latexpackage{doc}}
% \todo[inline]{Add to documentation DescribeOption and option macros}
% \todo[inline]{Make task declarations preamble only}
% \todo[inline]{Configure lists environments}
% \todo[inline]{switch to \texttt{fancyvrb}}
% \todo[inline]{Move title up on page and in code too}
% \todo[inline]{refactor for variants}
%^^A \todo[inline]{}
% \Finale
% \iffalse
%<*test>
\documentclass[12pt]{ngetest}

%%%
\makeatletter
\newcommand{\showkey}[1]{%
\par\noindent  Key \texttt{#1}
  \pgfkeysifdefined{#1}{%
    \ifthenelse{\equal{\pgfkeysvalueof{#1}}{}}{is empty}
    {has value \texttt{\pgfkeysvalueof{#1}}}}
  {is undefined}.}
\newcommand{\showmacro}[1]{%
\par\noindent  Macro \texttt{\char`\\ #1} \@ifundefined{#1}{is undefined}
  {\ifthenelse{\equal{\csname #1\endcsname}{}}{is empty}{has value
      \texttt{\csname #1\endcsname}}}.}
%%%
\newtask{NGEtask}
\newcounter{problem}
\newtask[name=Problem, counter=problem, points=5]{problem}
\usepackage{amsthm}
\theoremstyle{plain}
\newtheorem{exercise}{Exercise}
\newtheorem{theorem}[exercise]{Theorem}
\taskstyle{theorem}
\newtask{theorem}
\newtask[points=12]{exercise}
%%%
\usepackage{fancyhdr}
\pagestyle{fancy}
\lhead{\itshape Institution}
\chead{\NGE@shortcoursename}
\rhead{Semester}
%\lfoot{}
%\cfoot{}
%\rfoot{}
\renewcommand{\headrulewidth}{0pt}
%\renewcommand{\footrulewidth}{0pt}
%%%
\title{Testing class \textsf{ngetest}\\  
  \iftestmode{test mode}%
  \ifanswersmode{answers mode}%
  \ifkeymode{key mode}}
\instructor{A.~N.~Onym}
\course[Course]{Course name}
\begin{document}
\maketitle

This is a test file for class \texttt{ngetest}.

\showkey{/NGE/test/information/name}
\showkey{/NGE/test/information/course}



\subsection*{Modes}

\showkey{/NGE/test/options/mode}
\showmacro{NGEmode}
\showmacro{NGE@modesep}
\showkey{/NGE/test/jobname/root}
\showmacro{NGE@suffix}


\ifNGEmode{test}
{\par\noindent
  This line should be visible only in \texttt{test} mode.}
{\par\noindent
  This line should be visible in all modes other than \texttt{test}.}
\ifNGEmode{answers}
{\par\noindent
  This line should be visible only in \texttt{answers} mode.}
{\par\noindent
  This line should be visible in all modes other than \texttt{answers}.}
\ifNGEmode{key}
{\par\noindent
  This line should be visible only in \texttt{key} mode.}
{\par\noindent
  This line should be visible in all modes other than \texttt{key}.}

\iftestmode{
  \par\noindent This line should be visible only in \texttt{test} mode.}
\ifanswersmode{\par\noindent
  This line should be visible in \texttt{answers} mode only.}
\ifkeymode{\par\noindent
  This line should be visible in \texttt{key} mode only.}

\begin{testcomment}
  This is a test comment.  It is visible only in \texttt{test} mode.
\end{testcomment}
\begin{answerscomment}
  This is an answers comment.  It is visible only in \texttt{answers} mode.
\end{answerscomment}
\begin{keycomment}
  This is a key comment.  It is visible only in \texttt{key} mode.
\end{keycomment}
\begin{comment}
  This is a generic comment.  It must never be visible unless revealed
  explicitely with \verb+\includeversion+.
\end{comment}

\subsection*{Tasks}

First we test environment in \texttt{nge} style with default configuration.
\begin{NGEtask}
  This is the default task with default settings.
\end{NGEtask}
\begin{NGEtask}[name=Task]
  This is a task, whose name was changed.
\end{NGEtask}
\begin{NGEtask}[points=10]
  This is a task with modified number of points.
\end{NGEtask}
\begin{NGEtask}[unnumbered]
  This is a task without a number.
\end{NGEtask}
\begin{NGEtask}[name={}]
  This is a task without a name.
\end{NGEtask}
\begin{NGEtask}[hidepoints]
  This is a task with hidden point value.
\end{NGEtask}
\begin{NGEtask}[font=\sffamily]
  This is a task with modified body font.
\end{NGEtask}
\begin{NGEtask}[head={}]
  This is a task with disabled header.
\end{NGEtask}
\begin{NGEtask}[head/font={\ttfamily}]
  This is a task with modified head font.
\end{NGEtask}
\begin{NGEtask}[note/font={\ttfamily}]
  This is a task with modified note font.
\end{NGEtask}
\begin{NGEtask}[head/punctuation={:}]
  This is a task with modified punctuation sign after the header.
\end{NGEtask}
\begin{NGEtask}[tag={ABC}]\label{task:abc}
  This question has no number.  It is tagged.  It should not break
  the numbering sequence though.
\end{NGEtask}
\begin{NGEtask}\label{task:last}
  Last question.
\end{NGEtask}
Let us also test whether we can reference these tasks:
task \ref{task:abc} and task \ref{task:last}.

Now we use another task with style \texttt{nge} with modified default
settings: different name and these tasks are numbered separately from
the previous sequence of tasks.
\begin{problem}
  Here is a problem with default settings.
\end{problem}
\begin{problem}[points=10]
  Here is another problem with modified number of points.
\end{problem}
\begin{problem}[name={Bonus problem}, nopoints, unnumbered]
  This problem has modified title and is assigned no points.
\end{problem}

\begin{NGEtask}[name=Problem, points=5]
  Here is another question from the default series.  It has been
  modified to look like a problem, but is numbered together with other
  tasks, not with problems.
\end{NGEtask}
\begin{problem}[name=Consolation task, unnumbered]
  Here is another problem without a number.
\end{problem}
\begin{problem}
  Last problem with default settings.
\end{problem}

Let us continue with task options testing.
\begin{NGEtask}[points=parts]
  This is task number \theNGE@task.
  Points for this task are computed by \texttt{parts} environment with
  default settings.
  \begin{parts}
    \part Here is the part with default settings
    \part[points=1] This part is assigned one point.
    \part[points=2] This part is assigned two points and it also has subparts.
    \begin{parts}
      \part This is the first subpart.
      \part This is the second subpart.  Here we introduce the deepest
      subparts level.
      \begin{parts}
        \part subsubpart one
      \end{parts}
      The time one needs subsubparts is surely the time to
      think through the problem outline.  But here it is, in case
      anyone needs it.
      \begin{parts}
        \part Have to create better labels for this level though.
        \part May be it is better to leave it at users discretion.
      \end{parts}
      \part This is the third subpart.
    \end{parts}
    \part And now we return to previous parts level.
  \end{parts}
  The value of NGE@task counter is \theNGE@task.
\end{NGEtask}
\begin{NGEtask}[points=parts]
  This is the task whose points are determined by \texttt{parts}
  environment with modified setting: each part is by default given 4 points.
  \begin{parts}[points=4]
    \part This is a part with default settings.
    \part This is also a part with default settings.
    \part[label={ABC}] This is yet another part, but it is not
    numbered, instead it is labeled explicitely.  Compare numbers of
    parts before and after.
    \part[points=6] This part received 6 points
  \end{parts}
  Here we interrupt parts outline with some general remarks.
  \begin{parts}
    \part This is a part with default settings.
  \end{parts}
  Finally we compare the previous setup with \texttt{enumerate} environment.
  \begin{enumerate}\renewcommand{\theenumi}{\alph{enumi})}
  \item Some text
  \item Some more text.  We continue till the end of line to see
    whether the second line is indented or it is flush with the label.
    Apparently in \texttt{enumerate} environment it is flush.
  \item Another item.  
  \end{enumerate}
\end{NGEtask}
\begin{NGEtask}[points=15]
  This task is worth 15 points.
\end{NGEtask}
\begin{NGEtask}[name=Practical task]
  This task has modified name and default number of points.
\end{NGEtask}
\begin{NGEtask}[name=Consolation problem, note={bonus}, points=1]
  This task has modified name and is assigned one point.  It also has
  a note in it.
\end{NGEtask}
\begin{NGEtask}[points=50,name=Problem]
  This task is a problem, it is 50 points worth.
\end{NGEtask}

The next series of tasks are defined with style \texttt{theorem} and
use \texttt{theorem} environment, configured with the help of
\texttt{amsthm} package.
\begin{exercise}
  First exercise.  Default settings.
\end{exercise}
\begin{exercise}[points=6]
  Second exercise.  Number of points is changed.
\end{exercise}
\begin{exercise}[hidepoints]
  Third exercise.  Points are not displayed but they are still assigned.
\end{exercise}
\begin{exercise}[nopoints]
  Fourth exercise.  Points accounting has been turned off.
\end{exercise}

Finally we here are a couple of tasks in \texttt{amsthm} style.
\begin{theorem}[points=1]
  Prove me.
\end{theorem}
\begin{theorem}[points=2]
  Prove harder.
\end{theorem}
\begin{theorem}[note={test note},nopoints]
  Now generalize.  Points are turned off, and a note is given.
\end{theorem}

Altogether there were \theNGEpointstotal\ points assigned to
\theNGE@task\ tasks.

%\iffalse
%<*hide>
%\fi

\subsection*{Solutions and answers}

Solutions and answers must not be visible in \texttt{test} mode.
\begin{answer}
  This is the default confiration of answer.
\end{answer}
\begin{solution}
  This is the default configuration of the solution.  It looks just
  like the answer, but has \texttt{end of solution} sign at the end.
\end{solution}
%\iffalse
%</hide>
%\fi
\end{document}
%</test>
% \fi
%^^A Local Variables:
%^^A TeX-master: t
%^^A End:
